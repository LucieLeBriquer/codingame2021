commit 0ee3544c87687d572120f0ac7963bd5653327e8d
    TOTAL 
    Pourcentage de victoires        100%
    Moyenne du score allié          184pts
    Moyenne du score ennemi         19pts


game.maxTreeSize3 = 5 - (game.day >= 19) - (game.day >= 20) - (game.day >= 21) - (game.day >= 22);
    TOTAL 
    Pourcentage de victoires        100%
    Moyenne du score allié          198pts
    Moyenne du score ennemi         17pts

    TOTAL 
    Pourcentage de victoires        100%
    Moyenne du score allié          197pts
    Moyenne du score ennemi         17pts

game.maxTreeSize3 = 5 - 2 * (game.day >= 19)
    la même


Mon algo basic :
- calculer le soleil par tour par taille d'arbre pour chacune des cases :
    on regarde combien de soleil on obtiendrait dans chacune des directions pour toutes les tailles potentielles
        bonus si on fait de l'ombre a l'ennemi 
        malus si on se fait de l'ombre
    cell  : score pour taille1 / score pour taille2 / score pour taille3
    cell0 : 1/2/3   si aucun voisin par exemple
    chacun des scores est la moy des sun dans les 6 directions
    rmq : bonus/malus = +- tree_size[celui qui est a l'ombre] / 6

- nextSunBalance : si spookyNext[i] != 0, sunBalance[i] = size[i], else sunBalance[i] = 0
    si i fait de l'ombre a un de mes arbres j : 
        sunBalance[i] -= size[j]
    si i fait de l'ombre a un arbre adverse j :
        sunBalance[i] += size[j]

Globalement :
- plantation : en fonction du max sun/turn/size
- grow : pareil, sauf qu'en plus on ne grow que si la balance du jour suivant est > 0
- complete : plus petit sun/turn/size et uniquement si balance < 3 (<= 0 ?)